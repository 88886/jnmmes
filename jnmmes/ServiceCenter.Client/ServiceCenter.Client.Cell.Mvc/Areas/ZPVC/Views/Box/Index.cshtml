@model ServiceCenter.Client.Mvc.Areas.ZPVC.Models.BoxViewModel
@using ServiceCenter.MES.Model.ZPVC;
@using ServiceCenter.Model;
@using ServiceCenter.Common;
@using ServiceCenter.Client.Mvc.Areas.ZPVC.Models;
@using ZPVCRsources = ServiceCenter.Client.Mvc.Resources.ZPVC;
@using ServiceCenter.Client.Mvc.Resources;

@{
    ViewBag.Title = ZPVCRsources.StringResource.Box_ManagePageTitle;
}
<h2>@ViewBag.Title</h2>
@using (Ajax.BeginForm("Save", "Box", null
                    , new AjaxOptions()
                    {
                        HttpMethod = "Post",
                        OnSuccess = "completeSave",
                        OnBegin = "beginSave"
                    }
                    , new { @class = "form-horizontal", resource = "form", id = "frmPackage", autocomplete = "off" }))
{
<div class="panel panel-default">
    <div class="panel-heading">
        <input type="submit" value="装箱" class="btn btn-primary" id="btnSave" />
        @Ajax.ActionLink(StringResource.Print
                          , "Print"
                         , null
                         , new AjaxOptions()
                         {
                             HttpMethod = "Post",
                             OnBegin = "beginPrint",
                             OnSuccess = "completePrint"
                         }
                          , new { @class = "btn btn-default", @id = "btnPrint" })
    </div>
    <div class="panel-body">
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <div class="form-group">
            <div class="col-md-2">
                @Html.LabelFor(m => m.BoxNo, new { @class = "control-label" })
            </div>
            <div class="col-md-2">
                @Html.TextBoxFor(m => m.BoxNo, new { @class = "form-control", style = "text-transform:uppercase;ime-mode:disabled" })
                @Html.ValidationMessageFor(m => m.BoxNo)
            </div>
            <div class="col-md-2">
                @Html.LabelFor(m => m.FullQuantity, new { @class = "control-label" })
            </div>
            <div class="col-md-2">
                @Html.TextBoxFor(m => m.FullQuantity, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.FullQuantity)
            </div>
            <div class="col-md-2">
                @Html.LabelFor(m => m.CurrentQuantity, new { @class = "control-label" })
            </div>
            <div class="col-md-2" >
                @Html.TextBoxFor(m => m.CurrentQuantity, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(m => m.CurrentQuantity)
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-2">
                @Html.LabelFor(m => m.PrinterName, new { @class = "control-label" })
            </div>
            <div class="col-md-2">
                @Html.DropDownListFor(m => m.PrinterName, @Model.GetPrinterNameList(), new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.PrinterName)
            </div>
            <div class="col-md-2">
                @Html.LabelFor(m => m.PrintLabelCode, new { @class = "control-label" })
            </div>
            <div class="col-md-2">
                @Html.DropDownListFor(m => m.PrintLabelCode, @Model.GetLabelCodeList(), new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.PrintLabelCode)
            </div>
            <div class="col-md-2">
                @Html.LabelFor(m => m.PrintQty, new { @class = "control-label" })
            </div>
            <div class="col-md-2">
                @Html.TextBoxFor(m => m.PrintQty, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.PrintQty)
            </div>
        </div>
        <div class="form-group has-success">
            <div class="col-md-12">
                @Html.LabelFor(m => m.PackageNo, new { @class = "control-label" })
                @Html.TextBoxFor(m => m.PackageNo, new { @class = "form-control", @style = "height:50px;font-size:20px;text-transform:uppercase;ime-mode:disabled" })
                @Html.ValidationMessageFor(m => m.PackageNo)
            </div>
        </div>
        <div class="alert fade in hide" resource="alert" id="statusMessage" style="margin:0px">
            <button type="button" class="close" onclick="hideStatusMessage()">
                <span aria-hidden="true">×</span><span class="sr-only">Close</span>
            </button>
            <p></p>
        </div>
    </div>
    @Ajax.ActionLink(StringResource.Refresh, "Query",null,
                    new AjaxOptions()
                    {
                        HttpMethod="POST",
                        UpdateTargetId = "list",
                        OnBegin="beginRefresh",
                        OnSuccess="completeRefresh"
                    }, new { @class = "btn btn-default", @id = "btnRefresh" })
    <div id="list">
    </div>
</div>
}

@section Scripts {
    <script type="text/javascript" language="javascript">
        $(function () {
            $("#PackageNo").focus();
            
            $("#btnSave").click(function () {
                hideStatusMessage();
                if ($("#PackageNo").val() == "") {
                    return false;
                }
            });


            $("#PackageNo").keypress(function (args) {
                if (args.keyCode == 13) {
                    $("#btnSave").click();
                }
            });

            $("#BoxNo").keypress(function (args) {
                if (args.keyCode == 13) {
                    changeBoxNo($(this));
                }
            });

            $("body").keypress(function (args) {
                if (args.ctrlKey == true && args.keyCode == 13) {
                    $("#btnSave").click();
                }
            });

            var texts = $("#frmPackage").find(":text:visible:enabled,:checkbox:visible:enabled,textarea:visible:enabled,select:visible:enabled");
            texts = texts.not("[readonly]");
            texts.focus(function () {
                    $(this).select();
                })
                .keypress(function (args) {
                    if (args.ctrlKey == false && args.keyCode == 13) {
                        var index = texts.index(this)+1;
                        if (index < texts.length) {
                            var c = texts.eq(index);
                            c.focus();
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                });

            $("#btnRefresh").click();
        });

        function changeBoxNo(element) {
            $("#CurrentQuantity").val(0);

            var url = "@Url.Action("GetBoxInfo", "Box", new { area = "ZPVC" })";
            var reqdata = { BoxNo: $(element).val() };

            $.getJSON(url, reqdata, function (data) {
                $("#CurrentQuantity").val(0);
                $("#CurrentQuantity").val(data.CurrentQuantity);
                $("#btnRefresh").click();
            });
        }

        //隐藏状态消息
        function hideStatusMessage() {
            $("#statusMessage").addClass("hide");
        }

        function beginSave() {
            $("input,select").attr("disabled", "disabled");
            $(".btn").attr("disabled", "disabled");
            hideStatusMessage();
        }

        function completeSave(result, status, xhr) {
            $("input,select").removeAttr("disabled");
            $(".btn").removeAttr("disabled");
            if (xhr.status == 200) {
                showErrorInfo(result);
                
                if (result.Code == 0 && result.Data.CurrentQuantity == result.Data.FullQuantity) {
                    $("#BoxNo").val("");
                }
                else if (result.Code == 0) {
                    $("#BoxNo").val(result.Data.BoxNo);
                }
                changeBoxNo($("#BoxNo"));
            }
            else {
                var rst = { Code: xhr.statusCode, Message: status + ":" + response };
                showErrorInfo(rst);
            }
            $("#PackageNo").focus().select();
        }

        function showErrorInfo(result) {
            $("#statusMessage").find("p").html(result.Message);
            $("#statusMessage").removeClass("hide");
            if (result.Code > 0) {
                $("#statusMessage").removeClass("alert-success");
                $("#statusMessage").addClass("alert-danger");
            }
            else {
                $("#statusMessage").removeClass("alert-danger");
                $("#statusMessage").addClass("alert-success");
            }
        }
    </script>
    @* 刷新包装明细 *@
    <script type="text/javascript" language="javascript">
        function beginRefresh(obj,req) {
            $("#btnRefresh").attr("disabled", "disabled");
            req.data += "&BoxNo=" + $("#BoxNo").val();
        }

        function completeRefresh(result, status, xhr) {
            $("#btnRefresh").removeAttr("disabled");
        }
    </script>
    @* 完成删除 *@
    <script type="text/javascript" language="javascript">

        function beginDelete(obj,req) {
            $("input,select").attr("disabled", "disabled");
            $(".btn").attr("disabled", "disabled");
        }

        function completeDelete(result, status, xhr) {
            $("input,select").removeAttr("disabled");
            $(".btn").removeAttr("disabled");
            showErrorInfo(result);
            if (xhr.status == 200) {
                showErrorInfo(result);
                if (result.Code == 0) {
                    changeBoxNo($("#BoxNo"));
                }
            }
            else {
                var rst = { Code: xhr.statusCode, Message: status + ":" + response };
                showErrorInfo(rst);
            }
            $("#PackageNo").focus().select();
        }
    </script>
    <script type="text/javascript" language="javascript">
        //打印
        function beginPrint(obj, req) {
            var currentQty = $("#CurrentQuantity").val();
            var fullQty = $("#FullQuantity").val();
            if (currentQty != fullQty && confirm("当前数量不满箱，确定打印箱标签？")==false) {
                    return false;
            }
            var data = $("#frmPackage").serialize();
            req.data += "&" + data;
            $("#btnPrint").attr("disabled", "disabled");
            $("#btnSave").attr("disabled", "disabled");
        }

        function completePrint(result) {
            $("#btnPrint").removeAttr("disabled");
            $("#btnSave").removeAttr("disabled");
            showErrorInfo(result);
            $("#PackageNo").focus().select();
        }
    </script>

}